using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentAssertions;

namespace LevelUp.CheckCalculator.Tests
{
    [TestClass]
    public class CalculatorTests
    {
        [TestMethod]
        public void DiscountToApplyTestBattery()
        {
            /* 4 States
             * Compare 'Payment' to 'Due W/Tax' where 'Due W/Tax' is less than, equal, greater than, and 0
             * 
             * 4 States
             * Compare 'MFC' to 'Payment' where 'MFC' is less than, equal, greater than, and 0
             * 
             * 5 States
             * Compare 'Exempt' to 'MFC' or 'Due W/Tax' where 'Exempt' is less than, equal, greater than, and 0
             * 
             * Results in 4 * 4 * 5 test cases.
             */
            int[,] values = {
                //CheckTotal, Tax, Payment, Discount Amount, Exempt Amount
                {10, 1, 10, 5, 3, 5},
                {10, 1, 10, 5, 5, 4},
                {10, 1, 10, 5, 10, 0},
                {10, 1, 10, 5, 20, 0},
                {10, 1, 10, 5, 0, 5},
                {10, 1, 10, 10, 3, 6},
                {10, 1, 10, 10, 5, 4},
                {10, 1, 10, 10, 10, 0},
                {10, 1, 10, 10, 20, 0},
                {10, 1, 10, 10, 0, 9},
                {10, 1, 10, 20, 3, 6},
                {10, 1, 10, 20, 5, 4},
                {10, 1, 10, 20, 10, 0},
                {10, 1, 10, 20, 20, 0},
                {10, 1, 10, 20, 0, 9},
                {10, 1, 10, 0, 3, 0},
                {10, 1, 10, 0, 5, 0},
                {10, 1, 10, 0, 10, 0},
                {10, 1, 10, 0, 20, 0},
                {10, 1, 10, 0, 0, 0},
                {11, 1, 10, 5, 3, 5},
                {11, 1, 10, 5, 5, 5},
                {11, 1, 10, 5, 10, 0},
                {11, 1, 10, 5, 20, 0},
                {11, 1, 10, 5, 0, 5},
                {11, 1, 10, 10, 3, 7},
                {11, 1, 10, 10, 5, 5},
                {11, 1, 10, 10, 10, 0},
                {11, 1, 10, 10, 20, 0},
                {11, 1, 10, 10, 0, 10},
                {11, 1, 10, 20, 3, 7},
                {11, 1, 10, 20, 5, 5},
                {11, 1, 10, 20, 10, 0},
                {11, 1, 10, 20, 20, 0},
                {11, 1, 10, 20, 0, 10},
                {11, 1, 10, 0, 3, 0},
                {11, 1, 10, 0, 5, 0},
                {11, 1, 10, 0, 10, 0},
                {11, 1, 10, 0, 20, 0},
                {11, 1, 10, 0, 0, 0},
                {12, 1, 10, 5, 3, 5},
                {12, 1, 10, 5, 5, 5},
                {12, 1, 10, 5, 10, 1},
                {12, 1, 10, 5, 20, 0},
                {12, 1, 10, 5, 0, 5},
                {12, 1, 10, 10, 3, 8},
                {12, 1, 10, 10, 5, 6},
                {12, 1, 10, 10, 10, 1},
                {12, 1, 10, 10, 20, 0},
                {12, 1, 10, 10, 0, 10},
                {12, 1, 10, 20, 3, 8},
                {12, 1, 10, 20, 5, 6},
                {12, 1, 10, 20, 10, 1},
                {12, 1, 10, 20, 20, 0},
                {12, 1, 10, 20, 0, 10},
                {12, 1, 10, 0, 3, 0},
                {12, 1, 10, 0, 5, 0},
                {12, 1, 10, 0, 10, 0},
                {12, 1, 10, 0, 20, 0},
                {12, 1, 10, 0, 0, 0},
                {0, 0, 10, 5, 3, 0},
                {0, 0, 10, 5, 5, 0},
                {0, 0, 10, 5, 10, 0},
                {0, 0, 10, 5, 20, 0},
                {0, 0, 10, 5, 0, 0},
                {0, 0, 10, 10, 3, 0},
                {0, 0, 10, 10, 5, 0},
                {0, 0, 10, 10, 10, 0},
                {0, 0, 10, 10, 20, 0},
                {0, 0, 10, 10, 0, 0},
                {0, 0, 10, 20, 3, 0},
                {0, 0, 10, 20, 5, 0},
                {0, 0, 10, 20, 10, 0},
                {0, 0, 10, 20, 20, 0},
                {0, 0, 10, 20, 0, 0},
                {0, 0, 10, 0, 3, 0},
                {0, 0, 10, 0, 5, 0},
                {0, 0, 10, 0, 10, 0},
                {0, 0, 10, 0, 20, 0},
                {0, 0, 10, 0, 0, 0}

            };

            RunTestArray(values);
        }

        private void RunTestArray(int[,] values)
        {
            for (int i = 0; i < values.GetLength(0); i++)
            {
                Calculator.CalculateDiscountToApply(values[i, 0],
                    values[i, 1],
                    values[i, 2],
                    values[i, 3],
                    values[i, 4]).Should().Be(values[i, 5], "row={0}", i);
            }
        }
    }
}
