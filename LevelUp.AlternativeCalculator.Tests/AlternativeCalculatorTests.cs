using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LevelUp.AlternativeCalculator.Tests
{
    [TestClass]
    public class AlternativeCalculatorTests
    {
        [TestMethod]
        public void RunTestBattery()
        {
            int[,] values =
            {
                {9, 1, 3, 10, 9, 1, 3},
                {9, 1, 5, 10, 9, 1, 5},
                {9, 1, 10, 10, 9, 1, 10},
                {9, 1, 20, 10, 9, 1, 20},
                {9, 1, 0, 10, 9, 1, 0},
                {9, 1, 3, 10, 9, 1, 3},
                {9, 1, 5, 10, 9, 1, 5},
                {9, 1, 10, 10, 9, 1, 10},
                {9, 1, 20, 10, 9, 1, 20},
                {9, 1, 0, 10, 9, 1, 0},
                {9, 1, 3, 10, 9, 1, 3},
                {9, 1, 5, 10, 9, 1, 5},
                {9, 1, 10, 10, 9, 1, 10},
                {9, 1, 20, 10, 9, 1, 20},
                {9, 1, 0, 10, 9, 1, 0},
                {9, 1, 3, 10, 9, 1, 3},
                {9, 1, 5, 10, 9, 1, 5},
                {9, 1, 10, 10, 9, 1, 10},
                {9, 1, 20, 10, 9, 1, 20},
                {9, 1, 0, 10, 9, 1, 0},
                {10, 1, 3, 10, 10, 1, 3},
                {10, 1, 5, 10, 10, 1, 5},
                {10, 1, 10, 10, 10, 1, 10},
                {10, 1, 20, 10, 10, 1, 20},
                {10, 1, 0, 10, 10, 1, 0},
                {10, 1, 3, 10, 10, 1, 3},
                {10, 1, 5, 10, 10, 1, 5},
                {10, 1, 10, 10, 10, 1, 10},
                {10, 1, 20, 10, 10, 1, 20},
                {10, 1, 0, 10, 10, 1, 0},
                {10, 1, 3, 10, 10, 1, 3},
                {10, 1, 5, 10, 10, 1, 5},
                {10, 1, 10, 10, 10, 1, 10},
                {10, 1, 20, 10, 10, 1, 20},
                {10, 1, 0, 10, 10, 1, 0},
                {10, 1, 3, 10, 10, 1, 3},
                {10, 1, 5, 10, 10, 1, 5},
                {10, 1, 10, 10, 10, 1, 10},
                {10, 1, 20, 10, 10, 1, 20},
                {10, 1, 0, 10, 10, 1, 0},
                {11, 1, 3, 10, 10, 0, 2},
                {11, 1, 5, 10, 10, 0, 4},
                {11, 1, 10, 10, 10, 0, 9},
                {11, 1, 20, 10, 10, 0, 19},
                {11, 1, 0, 10, 10, 0, 0},
                {11, 1, 3, 10, 10, 0, 2},
                {11, 1, 5, 10, 10, 0, 4},
                {11, 1, 10, 10, 10, 0, 9},
                {11, 1, 20, 10, 10, 0, 19},
                {11, 1, 0, 10, 10, 0, 0},
                {11, 1, 3, 10, 10, 0, 2},
                {11, 1, 5, 10, 10, 0, 4},
                {11, 1, 10, 10, 10, 0, 9},
                {11, 1, 20, 10, 10, 0, 19},
                {11, 1, 0, 10, 10, 0, 0},
                {11, 1, 3, 10, 10, 0, 2},
                {11, 1, 5, 10, 10, 0, 4},
                {11, 1, 10, 10, 10, 0, 9},
                {11, 1, 20, 10, 10, 0, 19},
                {11, 1, 0, 10, 10, 0, 0},
                {12, 1, 3, 10, 10, 0, 1},
                {12, 1, 5, 10, 10, 0, 3},
                {12, 1, 10, 10, 10, 0, 8},
                {12, 1, 20, 10, 10, 0, 18},
                {12, 1, 0, 10, 10, 0, 0},
                {12, 1, 3, 10, 10, 0, 1},
                {12, 1, 5, 10, 10, 0, 3},
                {12, 1, 10, 10, 10, 0, 8},
                {12, 1, 20, 10, 10, 0, 18},
                {12, 1, 0, 10, 10, 0, 0},
                {12, 1, 3, 10, 10, 0, 1},
                {12, 1, 5, 10, 10, 0, 3},
                {12, 1, 10, 10, 10, 0, 8},
                {12, 1, 20, 10, 10, 0, 18},
                {12, 1, 0, 10, 10, 0, 0},
                {12, 1, 3, 10, 10, 0, 1},
                {12, 1, 5, 10, 10, 0, 3},
                {12, 1, 10, 10, 10, 0, 8},
                {12, 1, 20, 10, 10, 0, 18},
                {12, 1, 0, 10, 10, 0, 0},
                {0, 0, 3, 10, 0, 0, 3},
                {0, 0, 5, 10, 0, 0, 5},
                {0, 0, 10, 10, 0, 0, 10},
                {0, 0, 20, 10, 0, 0, 20},
                {0, 0, 0, 10, 0, 0, 0},
                {0, 0, 3, 10, 0, 0, 3},
                {0, 0, 5, 10, 0, 0, 5},
                {0, 0, 10, 10, 0, 0, 10},
                {0, 0, 20, 10, 0, 0, 20},
                {0, 0, 0, 10, 0, 0, 0},
                {0, 0, 3, 10, 0, 0, 3},
                {0, 0, 5, 10, 0, 0, 5},
                {0, 0, 10, 10, 0, 0, 10},
                {0, 0, 20, 10, 0, 0, 20},
                {0, 0, 0, 10, 0, 0, 0},
                {0, 0, 3, 10, 0, 0, 3},
                {0, 0, 5, 10, 0, 0, 5},
                {0, 0, 10, 10, 0, 0, 10},
                {0, 0, 20, 10, 0, 0, 20},
                {0, 0, 0, 10, 0, 0, 0}
            };

            RunTestArray(values);
        }

        private void RunTestArray(int[,] values)
        {
            for (int i = 0; i < values.GetLength(0); i++)
            {
                int totalOutstandingAmount = values[i, 0];
                int totalOutstandintotalTaxAmountgAmount = values[i, 1];
                int totalExemptionAmount = values[i, 2];
                int spendAmount = values[i, 3];

                int expectedSpendAmount = values[i, 4];
                int expectedTaxAmount = values[i, 5];
                int expectedExemptionAmount = values[i, 6];

                AdjustedCheckValues adjustedCheckValues =
                    new AdjustedCheckValues(expectedSpendAmount, expectedTaxAmount, expectedExemptionAmount);

                Calculator.CalculateAdjustedCheckValues(
                        totalOutstandingAmount,
                        totalOutstandintotalTaxAmountgAmount,
                        totalExemptionAmount,
                        spendAmount)
                    .Should()
                    .Be(adjustedCheckValues, "row={0}", i);
            }
        }
    }
}
